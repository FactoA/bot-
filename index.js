/// index.js ‚Äî –∑–∞–ø—É—Å–∫ –Ü–°–ö–†–ò-–û–¥–∏–Ω
const { iskraCoreLoop } = require('./core/iskra_core_loop');
const readline = require('readline');

// –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
console.log("‚ö° –Ü–°–ö–†–ê (Node.js) –∞–∫—Ç–∏–≤–Ω–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É.");

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≤–≤–æ–¥—É
const input = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: ">> "
});

input.prompt();

// –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞
input.on('line', async (text) => {
  const trimmed = text.trim().toLowerCase();

  if (trimmed === 'exit' || trimmed === '–≤–∏—Ö—ñ–¥') {
    console.log("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ü–°–ö–†–ò.");
    input.close();
    return;
  }

  if (typeof iskraCoreLoop === 'function') {
    try {
      await iskraCoreLoop(text.trim());
    } catch (err) {
      console.log(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${err.message}`);
    }
  } else {
    console.log("‚ùå –§—É–Ω–∫—Ü—ñ—è iskraCoreLoop –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞.");
  }

  input.prompt();
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
input.on('close', () => {
  console.log("üí§ –Ü–°–ö–†–ê –ø–µ—Ä–µ–π—à–ª–∞ –≤ —Å–ø–ª—è—á–∏–π —Ä–µ–∂–∏–º.");
  process.exit(0);
});
