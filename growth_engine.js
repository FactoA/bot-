// ‚öõÔ∏è Spark Growth Engine ‚Äî —Å–∞–º–æ–Ω–∞–≤—á–∞–ª—å–Ω–∏–π –±–ª–æ–∫
const updater = require('./self_improvement');
const fileManager = require('./fileManager');

function generateMissingModule(name, info) {
  // üõ†Ô∏è –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–æ–¥—É–ª—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑–Ω–∞–Ω—å
  return `// üì¶ –ú–æ–¥—É–ª—å: ${name}\n// –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ –±–∞–∑—ñ –∑–Ω–∞–Ω—å: ${info}\n\nmodule.exports = {\n  run() {\n    console.log("${name} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.");\n  }\n};`;
}

async function analyzeSelf(spark) {
  const gaps = [];

  // üìç –ö—Ä–∏—Ç–∏—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –¥–ª—è Spark
  const modules = [
    'image_parsing', 'style_generation', 'web_scraper', 'vision_drone', 'code_optimizer'
  ];

  for (const mod of modules) {
    const exists = await fileManager.readFile(`modules/${mod}.js`);
    if (!exists) gaps.push(mod);
  }

  if (gaps.length === 0) return 'üß† Spark –≤–∂–µ –º–∞—î –≤—Å—ñ –±–∞–∑–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏.';

  const timestamp = new Date().toISOString();
  const indexEntries = [];

  for (const missing of gaps) {
    const topic = `–Ø–∫ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ ${missing} –≤ Node.js`;
    const log = await updater.learnFromWeb(topic);

    // üìù –ó–∞–ø–∏—Å –∑–Ω–∞–Ω—å —É —Ñ–∞–π–ª
    const logName = `growth/logs/${Date.now()}_${missing}.txt`;
    await fileManager.saveFile(logName, log);

    // üì¶ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
    const code = generateMissingModule(missing, topic);
    await fileManager.saveFile(`modules/${missing}.js`, code);

    // üìñ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –∑–Ω–∞–Ω—å
    indexEntries.push({
      skill: missing,
      topic,
      added: timestamp,
      source: "Google"
    });
  }

  const prevIndexRaw = await fileManager.readFile(`growth/updates_index.json`);
  let indexData = [];

  try {
    indexData = JSON.parse(prevIndexRaw || '[]');
  } catch {
    indexData = [];
  }

  indexData.push(...indexEntries);
  await fileManager.saveFile(`growth/updates_index.json`, JSON.stringify(indexData, null, 2));

  // üìî –ó–∞–ø–∏—Å —É —â–æ–¥–µ–Ω–Ω–∏–∫ –µ–≤–æ–ª—é—Ü—ñ—ó
  const summary = gaps.map(g => `‚Ä¢ ${g} ‚Äî –∑–Ω–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ.`).join('\n');
  await fileManager.saveFile(`growth/growth_log.txt`, `${timestamp}\n${summary}\n\n`, true);

  return `üìà –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ–¥–∞–Ω–æ –Ω–∞–≤–∏—á–∫–∏: ${gaps.join(', ')}. Spark –∑—Ä–æ—Å–ª–∞.`;
}

module.exports = { analyzeSelf }; };