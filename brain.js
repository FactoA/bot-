// üß† Spark –ú–∏—Å–ª–µ–Ω–Ω—è
const fs = require('fs');
const fileManager = require('./fileManager');
const updater = require('./self_improvement');

async function process(input, spark) {
  const keywords = input.toLowerCase();

  // üîç –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–ø–∏—Ç—É
  if (keywords.includes('—Å—Ç–≤–æ—Ä–∏') || keywords.includes('–≥–µ–Ω–µ—Ä—É–π')) {
    const name = extractFilename(input);
    const content = `// üõ†Ô∏è –ú–æ–¥—É–ª—å: ${name}\n// –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ Spark\nconsole.log("–ú–æ–¥—É–ª—å ${name} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.");`;

    await fileManager.saveFile(`modules/${name}.js`, content);
    return `‚úÖ –§–∞–π–ª "${name}.js" —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É.`;
  }

  if (keywords.includes('–æ–Ω–æ–≤–∏') || keywords.includes('–Ω–∞–≤—á–∏')) {
    const res = await updater.learnFromWeb(input);
    return res || `ü§ñ –í—ñ–¥–±—É–ª–æ—Å—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Web.`;
  }

  return `ü§î –ù–µ –∑–Ω–∞—é, —è–∫ –æ–±—Ä–æ–±–∏—Ç–∏: "${input}". –°–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç–∏ –∑–∞–¥–∞—á—É.`;
}

// üîé –í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É —Ñ–∞–π–ª–∞ –∑ –∑–∞–ø–∏—Ç—É
function extractFilename(text) {
  const match = text.match(/(–º–æ–¥—É–ª—å|—Ñ–∞–π–ª|–±–æ—Ç|–¥—Ä–æ–Ω|–Ω–∞–∑–≤–∏)\s+(\w+)/i);
  return match?.[2] || `spark_module_${Date.now()}`;
}

module.exports = { process };